-- File: wave.vhd
-- Generated by MyHDL 0.11
-- Date: Tue Dec 14 17:04:29 2021


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity wave is
    port (
        sample: in unsigned(10 downto 0);
        sin: out unsigned(7 downto 0);
        cos: out unsigned(7 downto 0);
        enable: in std_logic;
        clock: in std_logic;
        reset: in std_logic
    );
end entity wave;
-- Phase accumulation.
-- sample -- wave samples index
-- sin --  sin wave output
-- cos -- cos wave output
-- enable -- control input
-- clock -- clock input
-- reset -- asynchronous reset input

architecture MyHDL of wave is



type t_array_mem is array(0 to 512-1) of unsigned(7 downto 0);
signal mem: t_array_mem;

begin




WAVE_SEQ: process (clock, reset) is
    variable L: line;
begin
    if (reset = '1') then
        sin <= to_unsigned(0, 8);
        cos <= to_unsigned(0, 8);
    elsif rising_edge(clock) then
        if bool(enable) then
            if (sample < 512) then
                sin <= mem(to_integer(sample));
                cos <= mem(to_integer(511 - signed(resize(sample, 12))));
            elsif (sample < 1024) then
                sin <= mem(to_integer(1023 - signed(resize(sample, 12))));
                cos <= resize(unsigned((-mem(to_integer(signed(resize(sample, 12)) - 512)))), 8);
            elsif (sample < 1536) then
                sin <= resize(unsigned((-mem(to_integer((-1024) + signed(resize(sample, 12)))))), 8);
                cos <= resize(unsigned((-mem(to_integer(1535 - signed(resize(sample, 12)))))), 8);
            elsif (sample < 2048) then
                sin <= resize(unsigned((-mem(to_integer(2047 - signed(resize(sample, 12)))))), 8);
                cos <= mem(to_integer((-1536) + signed(resize(sample, 12))));
            else
                write(L, string'("Overflow!"));
                writeline(output, L);
            end if;
        end if;
    end if;
end process WAVE_SEQ;

end architecture MyHDL;
